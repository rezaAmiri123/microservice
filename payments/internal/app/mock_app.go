// Code generated by mockery v2.27.1. DO NOT EDIT.

package app

import (
	context "context"

	commands "github.com/rezaAmiri123/microservice/payments/internal/app/commands"

	mock "github.com/stretchr/testify/mock"
)

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

// AdjustInvoice provides a mock function with given fields: ctx, cmd
func (_m *MockApp) AdjustInvoice(ctx context.Context, cmd commands.AdjustInvoice) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.AdjustInvoice) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizePayment provides a mock function with given fields: ctx, cmd
func (_m *MockApp) AuthorizePayment(ctx context.Context, cmd commands.AuthorizePayment) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.AuthorizePayment) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelInvoice provides a mock function with given fields: ctx, cmd
func (_m *MockApp) CancelInvoice(ctx context.Context, cmd commands.CancelInvoice) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.CancelInvoice) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmPayment provides a mock function with given fields: ctx, cmd
func (_m *MockApp) ConfirmPayment(ctx context.Context, cmd commands.ConfirmPayment) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.ConfirmPayment) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInvoice provides a mock function with given fields: ctx, cmd
func (_m *MockApp) CreateInvoice(ctx context.Context, cmd commands.CreateInvoice) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.CreateInvoice) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayInvoice provides a mock function with given fields: ctx, cmd
func (_m *MockApp) PayInvoice(ctx context.Context, cmd commands.PayInvoice) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.PayInvoice) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockApp(t mockConstructorTestingTNewMockApp) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
