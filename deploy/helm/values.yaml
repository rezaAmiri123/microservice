# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# global.postgresql.auth.username=testuser
# global.postgresql.auth.password=testpass
# global.postgresql.auth.database=testdb
# global:
#   postgresql:
#     auth:
#       username: testuser
#       password: testpass
#       database: testdb
# postgresql:
#   enabled: true
#   global:
#     postgresql:
#       postgresqlDatabase: "usersdb"
#       postgresqlPassword: "Hello@123"
#       postgresqlUsername: "userservice-pguser"
#       servicePort: "5432"
nats:
  auth:
    enabled: false
  persistence:
    enabled: true
    # storageClass: microk8s-hostpath
  jetstream:
    enabled: true
  cluster:
    auth:
      enabled: false
  debug:
    enabled: false
  service:
    type: NodePort
  # replicaCount: "3"  
    # fileStore:
    #   pvc:
    #     size: 10Gi
            # user:
    # password:
    # token: 
# helm install my-postgresql ./bitnami/postgresql \
#   --set livenessProbe.initialDelaySeconds=200 \
#   --set readinessProbe.initialDelaySeconds=200 \
#   --set persistence.storageClass=ibmc-file-gold-delayed \
#   --set volumePermissions.enabled=true
postgresql:
  postgresqlPassword: postgres_pass
  auth:
    username: postgres_user
    password: postgres_pass
    postgresPassword: postgres_pass
    database: postgres_db
  image:
    repository: postgres
    tag: 12-alpine
    pullPolicy: Never
    debug: true
  volumePermissions:
    # enabled: true
  # networkPolicy:
  #   enabled: true
  #   allowExternal: true
  primary:
    persistence:
      enabled: false
      mountPath: /var/data
      # storageClass: ibmc-file-gold-delayed
    livenessProbe:
      # initialDelaySeconds: 200
    readinessProbe:
      # initialDelaySeconds: 200
    initdb:
      # user: "postgres_user"
      # password: "postgres_pass"
      scripts:
        00_init_extensions.sh: |
          #!/bin/sh
          cat >> /tmp/init_security.psql <<          EOF
        
          GRANT ALL ON SCHEMA public TO postgres_user
          EOF
          export PGPASSWORD=postgres_pass
          psql --file /tmp/init_security.psql -U postgres_user -d postgres_db

        01_init_extensions.sh: |
          #!/bin/sh
          echo "Hi, I'm a testing script added by @carrodher"
          
          cat >> /tmp/init_db.psql <<          EOF
          CREATE DATABASE commondb TEMPLATE template0;

          -- requires file is executed with psql
          \c commondb

          -- Apply to keep modifications to the created_at column from being made
          CREATE OR REPLACE FUNCTION created_at_trigger() RETURNS TRIGGER AS
          \$\$
          BEGIN
            NEW.created_at := OLD.created_at;
            RETURN NEW;
          END;
          \$\$ LANGUAGE 'plpgsql';

          -- Apply to a table to automatically update update_at columns
          CREATE OR REPLACE FUNCTION updated_at_trigger() RETURNS TRIGGER AS
          \$\$
          BEGIN
            IF ROW (NEW.*) IS DISTINCT FROM ROW (OLD.*) THEN
              NEW.updated_at = NOW();
              RETURN NEW;
            ELSE
              RETURN OLD;
            END IF;
          END;
          \$\$ LANGUAGE 'plpgsql';
          EOF
          cat >> /tmp/init_services_db.psql <<          EOF
          CREATE DATABASE :db TEMPLATE commondb;

          CREATE USER :user WITH ENCRYPTED PASSWORD :'pass';
          GRANT USAGE ON SCHEMA public TO :user;
          GRANT CREATE, CONNECT ON DATABASE :db TO :user;

          \c :db

          CREATE SCHEMA :db;
          GRANT CREATE, USAGE ON SCHEMA :db TO :user;
          EOF

          export PGPASSWORD=postgres_pass
          export POSTGRESQL_POSTGRES_PASSWORD=postgres_pass
          # psql -U postgres -d postgres_db 
          psql --file /tmp/init_db.psql -U postgres -d postgres_db 
          psql --file /tmp/init_services_db.psql -v db=baskets -v user=baskets_user -v pass=baskets_pass -U postgres -d postgres_db 
          psql --file /tmp/init_services_db.psql -v db=cosec -v user=cosec_user -v pass=cosec_pass -U postgres -d postgres_db 
          psql --file /tmp/init_services_db.psql -v db=depot -v user=depot_user -v pass=depot_pass -U postgres -d postgres_db 
          psql --file /tmp/init_services_db.psql -v db=notifications -v user=notifications_user -v pass=notifications_pass -U postgres -d postgres_db 
          psql --file /tmp/init_services_db.psql -v db=ordering -v user=ordering_user -v pass=ordering_pass -U postgres -d postgres_db 
          psql --file /tmp/init_services_db.psql -v db=search -v user=search_user -v pass=search_pass -U postgres -d postgres_db 
          psql --file /tmp/init_services_db.psql -v db=stores -v user=stores_user -v pass=stores_pass -U postgres -d postgres_db 
          psql --file /tmp/init_services_db.psql -v db=payments -v user=payments_user -v pass=payments_pass -U postgres -d postgres_db 

  # primary:
    #     podSecurityContext:
    #         enabled: false
    #         fsGroup: ""
    #     containerSecurityContext:
    #         enabled: false
    #         runAsUser: "auto"

    # readReplicas:
    #     podSecurityContext:
    #         enabled: false
    #         fsGroup: ""
    #     containerSecurityContext:
    #         enabled: false
    #         runAsUser: "auto"

    # volumePermissions:
    #     enabled: false
    #     securityContext:
    #         runAsUser: "auto"

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

