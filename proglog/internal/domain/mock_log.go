// Code generated by mockery v2.33.0. DO NOT EDIT.

package domain

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockLog is an autogenerated mock type for the Log type
type MockLog struct {
	mock.Mock
}

// Append provides a mock function with given fields: record
func (_m *MockLog) Append(record *Record) (uint64, error) {
	ret := _m.Called(record)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(*Record) (uint64, error)); ok {
		return rf(record)
	}
	if rf, ok := ret.Get(0).(func(*Record) uint64); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*Record) error); ok {
		r1 = rf(record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *MockLog) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HighestOffset provides a mock function with given fields:
func (_m *MockLog) HighestOffset() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LowestOffset provides a mock function with given fields:
func (_m *MockLog) LowestOffset() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: offset
func (_m *MockLog) Read(offset uint64) (*Record, error) {
	ret := _m.Called(offset)

	var r0 *Record
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*Record, error)); ok {
		return rf(offset)
	}
	if rf, ok := ret.Get(0).(func(uint64) *Record); ok {
		r0 = rf(offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Record)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reader provides a mock function with given fields:
func (_m *MockLog) Reader() io.Reader {
	ret := _m.Called()

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func() io.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	return r0
}

// Remove provides a mock function with given fields:
func (_m *MockLog) Remove() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *MockLog) Reset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Truncate provides a mock function with given fields: lowest
func (_m *MockLog) Truncate(lowest uint64) error {
	ret := _m.Called(lowest)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(lowest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockLog creates a new instance of MockLog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLog {
	mock := &MockLog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
