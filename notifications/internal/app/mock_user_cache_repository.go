// Code generated by mockery v2.27.1. DO NOT EDIT.

package app

import (
	context "context"

	models "github.com/rezaAmiri123/microservice/notifications/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUserCacheRepository is an autogenerated mock type for the UserCacheRepository type
type MockUserCacheRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, userID, Username
func (_m *MockUserCacheRepository) Add(ctx context.Context, userID string, Username string) error {
	ret := _m.Called(ctx, userID, Username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, Username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, userID
func (_m *MockUserCacheRepository) Find(ctx context.Context, userID string) (*models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockUserCacheRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserCacheRepository creates a new instance of MockUserCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserCacheRepository(t mockConstructorTestingTNewMockUserCacheRepository) *MockUserCacheRepository {
	mock := &MockUserCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
