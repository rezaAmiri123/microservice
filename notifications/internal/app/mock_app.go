// Code generated by mockery v2.27.1. DO NOT EDIT.

package app

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

// NotifyOrderCanceled provides a mock function with given fields: ctx, cmd
func (_m *MockApp) NotifyOrderCanceled(ctx context.Context, cmd OrderCanceled) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, OrderCanceled) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyOrderCreated provides a mock function with given fields: ctx, cmd
func (_m *MockApp) NotifyOrderCreated(ctx context.Context, cmd OrderCreated) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, OrderCreated) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyOrderReady provides a mock function with given fields: ctx, cmd
func (_m *MockApp) NotifyOrderReady(ctx context.Context, cmd OrderReady) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, OrderReady) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockApp(t mockConstructorTestingTNewMockApp) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
