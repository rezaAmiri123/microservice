// Code generated by mockery v2.27.1. DO NOT EDIT.

package notificationspb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationsServiceServer is an autogenerated mock type for the NotificationsServiceServer type
type MockNotificationsServiceServer struct {
	mock.Mock
}

// NotifyOrderCanceled provides a mock function with given fields: _a0, _a1
func (_m *MockNotificationsServiceServer) NotifyOrderCanceled(_a0 context.Context, _a1 *NotifyOrderCanceledRequest) (*NotifyOrderCanceledResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *NotifyOrderCanceledResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NotifyOrderCanceledRequest) (*NotifyOrderCanceledResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NotifyOrderCanceledRequest) *NotifyOrderCanceledResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotifyOrderCanceledResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NotifyOrderCanceledRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyOrderCreated provides a mock function with given fields: _a0, _a1
func (_m *MockNotificationsServiceServer) NotifyOrderCreated(_a0 context.Context, _a1 *NotifyOrderCreatedRequest) (*NotifyOrderCreatedResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *NotifyOrderCreatedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NotifyOrderCreatedRequest) (*NotifyOrderCreatedResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NotifyOrderCreatedRequest) *NotifyOrderCreatedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotifyOrderCreatedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NotifyOrderCreatedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyOrderReady provides a mock function with given fields: _a0, _a1
func (_m *MockNotificationsServiceServer) NotifyOrderReady(_a0 context.Context, _a1 *NotifyOrderReadyRequest) (*NotifyOrderReadyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *NotifyOrderReadyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NotifyOrderReadyRequest) (*NotifyOrderReadyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NotifyOrderReadyRequest) *NotifyOrderReadyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotifyOrderReadyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NotifyOrderReadyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedNotificationsServiceServer provides a mock function with given fields:
func (_m *MockNotificationsServiceServer) mustEmbedUnimplementedNotificationsServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewMockNotificationsServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNotificationsServiceServer creates a new instance of MockNotificationsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNotificationsServiceServer(t mockConstructorTestingTNewMockNotificationsServiceServer) *MockNotificationsServiceServer {
	mock := &MockNotificationsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
