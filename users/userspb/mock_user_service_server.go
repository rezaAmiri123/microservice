// Code generated by mockery v2.20.0. DO NOT EDIT.

package userspb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserServiceServer is an autogenerated mock type for the UserServiceServer type
type MockUserServiceServer struct {
	mock.Mock
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *MockUserServiceServer) Login(_a0 context.Context, _a1 *LoginUserRequest) (*LoginUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *LoginUserRequest) (*LoginUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *LoginUserRequest) *LoginUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *LoginUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginVerify provides a mock function with given fields: _a0, _a1
func (_m *MockUserServiceServer) LoginVerify(_a0 context.Context, _a1 *LoginVerifyUserRequest) (*LoginVerifyUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LoginVerifyUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *LoginVerifyUserRequest) (*LoginVerifyUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *LoginVerifyUserRequest) *LoginVerifyUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginVerifyUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *LoginVerifyUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0, _a1
func (_m *MockUserServiceServer) RegisterUser(_a0 context.Context, _a1 *RegisterUserRequest) (*RegisterUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RegisterUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterUserRequest) *RegisterUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RegisterUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *MockUserServiceServer) UpdateUser(_a0 context.Context, _a1 *UpdateUserRequest) (*UpdateUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *UpdateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateUserRequest) *UpdateUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUserServiceServer provides a mock function with given fields:
func (_m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewMockUserServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserServiceServer creates a new instance of MockUserServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserServiceServer(t mockConstructorTestingTNewMockUserServiceServer) *MockUserServiceServer {
	mock := &MockUserServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
