// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/rezaAmiri123/microservice/users/usersclient/models"
)

// AuthorizeUserReader is a Reader for the AuthorizeUser structure.
type AuthorizeUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthorizeUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthorizeUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAuthorizeUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthorizeUserOK creates a AuthorizeUserOK with default headers values
func NewAuthorizeUserOK() *AuthorizeUserOK {
	return &AuthorizeUserOK{}
}

/*
AuthorizeUserOK describes a response with status code 200, with default header values.

A successful response.
*/
type AuthorizeUserOK struct {
	Payload models.UserspbAuthorizeUserResponse
}

// IsSuccess returns true when this authorize user o k response has a 2xx status code
func (o *AuthorizeUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this authorize user o k response has a 3xx status code
func (o *AuthorizeUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize user o k response has a 4xx status code
func (o *AuthorizeUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this authorize user o k response has a 5xx status code
func (o *AuthorizeUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize user o k response a status code equal to that given
func (o *AuthorizeUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the authorize user o k response
func (o *AuthorizeUserOK) Code() int {
	return 200
}

func (o *AuthorizeUserOK) Error() string {
	return fmt.Sprintf("[POST /v1/authorize_user][%d] authorizeUserOK  %+v", 200, o.Payload)
}

func (o *AuthorizeUserOK) String() string {
	return fmt.Sprintf("[POST /v1/authorize_user][%d] authorizeUserOK  %+v", 200, o.Payload)
}

func (o *AuthorizeUserOK) GetPayload() models.UserspbAuthorizeUserResponse {
	return o.Payload
}

func (o *AuthorizeUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorizeUserDefault creates a AuthorizeUserDefault with default headers values
func NewAuthorizeUserDefault(code int) *AuthorizeUserDefault {
	return &AuthorizeUserDefault{
		_statusCode: code,
	}
}

/*
AuthorizeUserDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type AuthorizeUserDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this authorize user default response has a 2xx status code
func (o *AuthorizeUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this authorize user default response has a 3xx status code
func (o *AuthorizeUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this authorize user default response has a 4xx status code
func (o *AuthorizeUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this authorize user default response has a 5xx status code
func (o *AuthorizeUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this authorize user default response a status code equal to that given
func (o *AuthorizeUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the authorize user default response
func (o *AuthorizeUserDefault) Code() int {
	return o._statusCode
}

func (o *AuthorizeUserDefault) Error() string {
	return fmt.Sprintf("[POST /v1/authorize_user][%d] authorizeUser default  %+v", o._statusCode, o.Payload)
}

func (o *AuthorizeUserDefault) String() string {
	return fmt.Sprintf("[POST /v1/authorize_user][%d] authorizeUser default  %+v", o._statusCode, o.Payload)
}

func (o *AuthorizeUserDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *AuthorizeUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
