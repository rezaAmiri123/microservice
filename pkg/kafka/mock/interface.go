// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/rezaAmiri123/microservice/pkg/kafka"
	kafka0 "github.com/segmentio/kafka-go"
)

// MockMessageProcessor is a mock of MessageProcessor interface.
type MockMessageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessorMockRecorder
}

// MockMessageProcessorMockRecorder is the mock recorder for MockMessageProcessor.
type MockMessageProcessorMockRecorder struct {
	mock *MockMessageProcessor
}

// NewMockMessageProcessor creates a new mock instance.
func NewMockMessageProcessor(ctrl *gomock.Controller) *MockMessageProcessor {
	mock := &MockMessageProcessor{ctrl: ctrl}
	mock.recorder = &MockMessageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessor) EXPECT() *MockMessageProcessorMockRecorder {
	return m.recorder
}

// ProcessMessages mocks base method.
func (m *MockMessageProcessor) ProcessMessages(ctx context.Context, r *kafka0.Reader, wg *sync.WaitGroup, workerID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessMessages", ctx, r, wg, workerID)
}

// ProcessMessages indicates an expected call of ProcessMessages.
func (mr *MockMessageProcessorMockRecorder) ProcessMessages(ctx, r, wg, workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessages", reflect.TypeOf((*MockMessageProcessor)(nil).ProcessMessages), ctx, r, wg, workerID)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// PublishMessage mocks base method.
func (m *MockProducer) PublishMessage(ctx context.Context, msgs ...kafka0.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMessage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockProducerMockRecorder) PublishMessage(ctx interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockProducer)(nil).PublishMessage), varargs...)
}

// MockConsumerGroup is a mock of ConsumerGroup interface.
type MockConsumerGroup struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerGroupMockRecorder
}

// MockConsumerGroupMockRecorder is the mock recorder for MockConsumerGroup.
type MockConsumerGroupMockRecorder struct {
	mock *MockConsumerGroup
}

// NewMockConsumerGroup creates a new mock instance.
func NewMockConsumerGroup(ctrl *gomock.Controller) *MockConsumerGroup {
	mock := &MockConsumerGroup{ctrl: ctrl}
	mock.recorder = &MockConsumerGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerGroup) EXPECT() *MockConsumerGroupMockRecorder {
	return m.recorder
}

// ConsumeTopic mocks base method.
func (m *MockConsumerGroup) ConsumeTopic(ctx context.Context, cancel context.CancelFunc, groupID, topic string, poolSize int, worker kafka.Worker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsumeTopic", ctx, cancel, groupID, topic, poolSize, worker)
}

// ConsumeTopic indicates an expected call of ConsumeTopic.
func (mr *MockConsumerGroupMockRecorder) ConsumeTopic(ctx, cancel, groupID, topic, poolSize, worker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeTopic", reflect.TypeOf((*MockConsumerGroup)(nil).ConsumeTopic), ctx, cancel, groupID, topic, poolSize, worker)
}

// GetNewKafkaReader mocks base method.
func (m *MockConsumerGroup) GetNewKafkaReader(kafkaURL []string, topic, groupID string) *kafka0.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewKafkaReader", kafkaURL, topic, groupID)
	ret0, _ := ret[0].(*kafka0.Reader)
	return ret0
}

// GetNewKafkaReader indicates an expected call of GetNewKafkaReader.
func (mr *MockConsumerGroupMockRecorder) GetNewKafkaReader(kafkaURL, topic, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewKafkaReader", reflect.TypeOf((*MockConsumerGroup)(nil).GetNewKafkaReader), kafkaURL, topic, groupID)
}

// GetNewKafkaWriter mocks base method.
func (m *MockConsumerGroup) GetNewKafkaWriter(topic string) *kafka0.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewKafkaWriter", topic)
	ret0, _ := ret[0].(*kafka0.Writer)
	return ret0
}

// GetNewKafkaWriter indicates an expected call of GetNewKafkaWriter.
func (mr *MockConsumerGroupMockRecorder) GetNewKafkaWriter(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewKafkaWriter", reflect.TypeOf((*MockConsumerGroup)(nil).GetNewKafkaWriter), topic)
}
