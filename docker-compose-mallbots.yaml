version: "3.8"

services:
  users:
    container_name: users
    hostname: users
    image: mallbots-users
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: users
    expose:
      - '9000'
    # volumes:
    # - ./:/mallbots
    # restart: always
    environment:
      ENVIRONMENT: development
      # RPC_SERVICES: 'STORES=stores:9000,CUSTOMERS=customers:9000'
      # PG_CONN: host=postgres dbname=baskets user=baskets_user password=baskets_pass search_path=baskets,public
      HTTP_SERVER_PORT: 8080
      GRPC_SERVER_PORT: 9000
      NATS_URL: nats:4222
      OTEL_SERVICE_NAME: baskets
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      POSTGRES_DRIVER: pgx
      POSTGRES_HOST: microservice_postgesql
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_DB_NAME: users
      POSTGRES_PASSWORD: postgres

    depends_on:
      - nats
      - postgesql
      - collector
    networks: [ "microservice" ]
    # profiles: [ microservices ]
    command: [ "./wait-for", "microservice_postgesql:5432", "--", "/mallbots/service" ]

  reverse-proxy:
    container_name: proxy
    hostname: proxy
    image: nginx:alpine
    ports:
      - '8080:8080'
    volumes:
      - './docker/nginx.conf:/etc/nginx/nginx.conf'
    # profiles: [ microservices ]
    networks: [ "microservice" ]

  postgesql:
    image: postgres:12-alpine
    container_name: microservice_postgesql
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=microservice
    volumes:
      - pgdata3:/var/lib/postgresql/data
    networks: [ "microservice" ]
    # profiles: [ microservices ]

  jaeger:
    container_name: microservice_jaeger
    restart: always
    image: jaegertracing/all-in-one:1.21
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    hostname: microservice_jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks: [ "microservice" ]
    # profiles: [ microservices ]

  prometheus:
    image: prom/prometheus:latest
    container_name: microservice_prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./monitoring/prometheus_docker.yml:/etc/prometheus/prometheus.yml:ro
    networks: [ "microservice" ]
    # profiles: [ microservices ]    
#  node_exporter:
#    container_name: node_exporter_container
#    restart: always
#    image: prom/node-exporter
#    ports:
#      - '9101:9100'
#    networks: [ "microservices" ]

  nats:
    container_name: nats
    hostname: nats
    image: nats:2-alpine
    ports:
      - '4222:4222'
      - '8222:8222'
    command:
      - -js
      - -sd
      - /var/lib/nats/data
      - -m 
      - '8222'
    volumes:
      - 'jsdata:/var/lib/nats/data'
    networks: [ "microservice" ]
    # profiles: [ microservices ]

  collector:
    container_name: collector
    hostname: collector
    image: otel/opentelemetry-collector-contrib:0.60.0
    command: [
      "--config=/etc/otel-config.yml",
    ]
    volumes:
      - ./docker/otel/otel-config.yml:/etc/otel-config.yml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
  #      - "55679:55679" # zpages extension
    networks: [ "microservice" ]
    # profiles: [ microservices ]

volumes:
  pgdata3:
  jsdata:

networks:
  microservice:
    name: microservice
