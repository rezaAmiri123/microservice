name: Reusable build 

on:
  docker_image:
    inputs:
      service:
        required: true
        type: string
    # env:
    #   SERVICE:
    #     required: true
    #     type: string

jobs:
  # reusable_test:
  #   runs-on: ubuntu-latest
  #   # if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Run Unit Tests
  #       working-directory: ./${{ inputs.service }}
  #       run: |
  #         go mod tidy
  #         go test --cover ./...

  reusable_docker:
    name: microservice deployment to EKS cluster
    runs-on: ubuntu-latest
    # needs: reusable_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  #     - name: Install kubectl
  #       id: kubectl
  #       uses: azure/setup-kubectl@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Login to AWS ECR
  #       id: ecr
  #       uses: aws-actions/amazon-ecr-login@v1
      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 

      - name: Build ${{ inputs.service }} microservice
        env:
          # REGISTRY: ${{ steps.ecr.outputs.registry }}
          REGISTRY: ${{secrets.DOCKER_USER}}
          GITHUB_SHA: ${{ github.sha }}
          DOCKERFILE: docker/Dockerfile.microservices
        run: |
          # docker build -t $REGISTRY/${{ inputs.service }}:$GITHUB_SHA -t $REGISTRY/${{ inputs.service }}:latest --file $DOCKERFILE --build-arg=service=${{ inputs.service }} .
          docker build -t $REGISTRY/${{ inputs.service }}:latest --file $DOCKERFILE --build-arg=service=${{ inputs.service }} .
          docker push $REGISTRY/${{ inputs.service }}:latest
