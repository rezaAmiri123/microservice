// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new invoice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invoice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AdjustInvoice(params *AdjustInvoiceParams, opts ...ClientOption) (*AdjustInvoiceOK, error)

	CancelInvoice(params *CancelInvoiceParams, opts ...ClientOption) (*CancelInvoiceOK, error)

	CreateInvoice(params *CreateInvoiceParams, opts ...ClientOption) (*CreateInvoiceOK, error)

	PayInvoice(params *PayInvoiceParams, opts ...ClientOption) (*PayInvoiceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AdjustInvoice adjusts an invoice

Use this API to adjust an invoice
*/
func (a *Client) AdjustInvoice(params *AdjustInvoiceParams, opts ...ClientOption) (*AdjustInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdjustInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adjustInvoice",
		Method:             "POST",
		PathPattern:        "/v1/api/payments/adjust_invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdjustInvoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdjustInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdjustInvoiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CancelInvoice cancels an invoice

Use this API to cancel an invoice
*/
func (a *Client) CancelInvoice(params *CancelInvoiceParams, opts ...ClientOption) (*CancelInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelInvoice",
		Method:             "POST",
		PathPattern:        "/v1/api/payments/cancel_invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelInvoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelInvoiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateInvoice creates new invoice

Use this API to create a new invoice
*/
func (a *Client) CreateInvoice(params *CreateInvoiceParams, opts ...ClientOption) (*CreateInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInvoice",
		Method:             "POST",
		PathPattern:        "/v1/api/payments/create_invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInvoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateInvoiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PayInvoice pays an invoice

Use this API to pay an invoice
*/
func (a *Client) PayInvoice(params *PayInvoiceParams, opts ...ClientOption) (*PayInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPayInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "payInvoice",
		Method:             "POST",
		PathPattern:        "/v1/api/payments/pay_invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PayInvoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PayInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PayInvoiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
