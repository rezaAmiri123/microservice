// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserspbLoginUserResponse userspb login user response
//
// swagger:model userspbLoginUserResponse
type UserspbLoginUserResponse struct {

	// access token
	AccessToken string `json:"accessToken,omitempty"`

	// access token expires at
	// Format: date-time
	AccessTokenExpiresAt strfmt.DateTime `json:"accessTokenExpiresAt,omitempty"`

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`

	// refresh token expires at
	// Format: date-time
	RefreshTokenExpiresAt strfmt.DateTime `json:"refreshTokenExpiresAt,omitempty"`

	// session Id
	SessionID string `json:"sessionId,omitempty"`

	// user
	User *UserspbUser `json:"user,omitempty"`
}

// Validate validates this userspb login user response
func (m *UserspbLoginUserResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTokenExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshTokenExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserspbLoginUserResponse) validateAccessTokenExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessTokenExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("accessTokenExpiresAt", "body", "date-time", m.AccessTokenExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserspbLoginUserResponse) validateRefreshTokenExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.RefreshTokenExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("refreshTokenExpiresAt", "body", "date-time", m.RefreshTokenExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserspbLoginUserResponse) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this userspb login user response based on the context it is used
func (m *UserspbLoginUserResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserspbLoginUserResponse) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserspbLoginUserResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserspbLoginUserResponse) UnmarshalBinary(b []byte) error {
	var res UserspbLoginUserResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
